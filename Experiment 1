// Start by declaring all the variables for sensor pins, output values and their thresholds

//Including the servo library
#include <Servo.h>

//Decalring Sensor 1 variables
int Sensor1Pin = A0;
int Sensor1Val;
int Sensor1Threshold;
int Sensor1Diff = 100;

//Declaring Sensor 2 variables
int Sensor2Pin = A1; 
int Sensor2Val;
int Sensor2Threshold; 
int Sensor2Diff = 100;

//Declaring a object state variable
int objectState = 0;

//Declaring Continuous servo motor 1 variables
Servo Cntservo1;
int CntServo1Pin = 9;
int CntServo1Speed = 92;
int CntServo1Deg = 180; 

//Decalring the Standard servo motor 1 variables
Servo StdServo1;
int StdServo1Pin = 10;
int StdServo1InitialPos = 90;
int StdServo1FinalPos = 180;
int StdServo1Delay = 2500;

// unsigned long previousMillis = 0;
// const long interval = 3000;
boolean SensorsAreTouched = false;
unsigned long ActionsStartTime = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() {
  //This bit calibrates the reading depending upon the difference
  Sensor1Threshold = analogRead(Sensor1Pin) - Sensor1Diff;
  Sensor2Threshold = analogRead(Sensor2Pin) - Sensor2Diff;

  //This bit attaches the Continuous servo motor to the assembly
  Cntservo1.attach(CntServo1Pin);
  Cntservo1.write(91.8);

  //This bit attaches the Standard servo motor to the assembly and moves it to its initial position
  StdServo1.attach(StdServo1Pin);
  StdServo1.write(StdServo1InitialPos);

  Serial.begin(9600);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop() {

  if (!SensorsAreTouched && ShouldStartActions()) {
    SensorsAreTouched = true;
    ActionsStartTime = millis(); 

    // Rotate the continuous servo in one direction
    // Cntservo1.write(80);
  }

  //This bit satisfies the condition that both the sensors need to be covered
  if(SensorsAreTouched && (millis()- ActionsStartTime >= 1000)){
    if(ShouldContinueActions()) {
      Cntservo1.write(100);
      delay(6500);

      Cntservo1.write(80);

      StdServo1.write(StdServo1FinalPos);
      delay(StdServo1Delay);
      
    }
    else{
      SensorsAreTouched = false;
      Cntservo1.write(91.8);
    }
  
    if(SensorsAreTouched && (millis() - ActionsStartTime >= 600)) {
      if(ShouldContinueActions()) {
      StdServo1.write(StdServo1InitialPos);
    }
    else{
      SensorsAreTouched = false;
      Cntservo1.write(91.8);  
      StdServo1.write(StdServo1InitialPos);    
    }
  }
  if(SensorsAreTouched && !ShouldContinueActions()){
    SensorsAreTouched = false; 
    Cntservo1.write(91.8);
    Serial.println("No bracelet");
    StdServo1.write(StdServo1InitialPos);

  }
  // Cntservo1.write(92);
  // StdServo1.write(StdServo1InitialPos);
}

}
  //  // unsigned long currentMillis = millis();

  //  // if (currentMillis - previousMillis >= interval){
  //  //   previousMillis = currentMillis;
  
  //   // This bit starts the Continuous servo motor in the intended direction
  //   Cntservo1.write(30);
  //   delay(500);

  //   if(!ShouldContinueActions()){
  //     SensorsAreTouched = false;
  //     Serial.println("No bracelet");
  //     Cntservo1.write(92);
  //     }
  //     else{
  //       StdServo1.write(StdServo1FinalPos);
  //       delay(StdServo1Delay);

  //       Cntservo1.write(150);
  //       delay(500);

  //       if(!ShouldContinueActions()){
  //         SensorsAreTouched = false;
  //         Serial.println("No bracelet");

  //         Cntservo1.write(92);
  //         }
  //         else{
  //           StdServo1.write(StdServo1InitialPos);
  //           Cntservo1.write(92);
  //           SensorsAreTouched = false;
  //           Serial.println("No bracelet");

  //         }
  //       }

  //     }
  //   }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
boolean ShouldStartActions() {
  //This bit reads the sensor values and gives them as the output
  Sensor1Val = analogRead(Sensor1Pin);
  Sensor2Val = analogRead(Sensor2Pin);

  return (Sensor1Val < Sensor1Threshold && Sensor2Val < Sensor2Threshold);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
boolean ShouldContinueActions() {
  //This bit checks if the light sensors are still touched to continue actions
  Sensor1Val = analogRead(Sensor1Pin);
  Sensor2Val = analogRead(Sensor2Pin);

  return (Sensor1Val < Sensor1Threshold && Sensor2Val < Sensor2Threshold);  
}

